{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "The Noir Programming Language",
	"patterns": [{
		"include": "#code"
	}],
	"repository": {
		"code": {
			"patterns": [{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#syntax"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#input"
				}
			]
		},
		"comments": {
			"patterns": [{
				"begin": "\\/\\*",
				"end": "\\*\\/",
				"name": "comment.block.nr",
				"patterns": [{
					"include": "#comments"
				}]
			}, {
				"match": "\\/\\/.*\n",
				"name": "comment.line.double-slash.nr"
			}]
		},
		"strings": {
			"name": "string.quoted.double.nr",
			"match": "\"(.*?)(\n|(?<!\\\\)\")",
			"captures": {
				"1": {
					"patterns": [{
						"name": "constant.character.escape",
						"match": "\\\\."
					}]
				}
			}
		},
		"numeric": {
			"patterns": [{
				"name": "token.error-token.nr",
				"match": "(\\-)?\\d+\\.\\d+(\\.|[a-zA-Z])"
			}, {
				"name": "constant.numeric.nr",
				"match": "(\\-)?\\d+(\\.\\d+)?"
			}]
		},
		"syntax": {
			"patterns": [
				{
					"match": "\\b(mod|use)\\s+([a-zA-Z_][a-zA-Z0-9_]*(::[a-zA-Z_][a-zA-Z0-9_]*)*)",
					"captures": {
						"1": {
							"name": "keyword.control.nr"
						},
						"2": {
							"name": "support.type.nr"
						}
					}
				},
				{
					"match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "keyword.control.nr"
						},
						"2": {
							"name": "support.function"
						}
					}
				},
				{
					"match": "\\b(const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "keyword.nr"
						},
						"2": {
							"name": "variable.other.constant"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.nr",
				"match": "\\b(fn|mod|use|struct|if|else|for|constrain)\\b"
			}, {
				"name": "keyword.nr",
				"match": "\\b(const|priv|pub|in|as|let)\\b"
			}]
		},
		"input": {
			"patterns": [{
				"name": "support.type.nr",
				"match": "\\b((u|i)\\d+|str|bool|Field)\\b"
			}, {
				"name": "support.type.nr",
				"match": "\\b(_*[A-Z][a-zA-Z0-9_]*|[a-zA-Z_][a-zA-Z0-9_]*::)\\b"
			}, {
				"begin": "\\b([a-z_][a-zA-Z0-9_]*)\\s*\\(",
				"end": "\\)",
				"beginCaptures": {
					"1": {
						"name": "support.function"
					}
				},
				"patterns": [{
					"include": "#code"
				}]
			}, {
				"name": "variable.nr",
				"match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
			}]
		}
	},
	"scopeName": "source.nr"
}